<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <sectionGroup name="iBATIS">
      <section name="logging" type="IBatisNet.Common.Logging.ConfigurationSectionHandler, IBatisNet.Common"/>
    </sectionGroup>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
    <section name="dataConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings, Microsoft.Practices.EnterpriseLibrary.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null"/>
    <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"/>
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging"/>
  </configSections>

  <dataConfiguration defaultDatabase="HCDB"/>
  <connectionStrings>

    <add name="HCDB" connectionString="Data Source=testcenhc;Persist Security Info=True;User ID=hcjy2008;Password=hcjy2008test;Unicode=True" providerName="System.Data.OracleClient"/>
    <add name="HCQueryDB" connectionString="Data Source=testcenhc;Persist Security Info=True;User ID=hcjy2008;Password=hcjy2008test;Unicode=True" providerName="System.Data.OracleClient"/>
    <!--
    <add name="UserDB" connectionString="Data Source=testdata;Persist Security Info=True;User ID=user2008;Password=user2008dev;Unicode=True" providerName="System.Data.OracleClient"/>
    -->
  </connectionStrings>

  <!--远程配置-->
  <system.runtime.remoting>
    <customErrors mode="Off" />
    <application>
      <channels>
        <channel ref="tcp" port="8866" >
          <clientProviders>
            <formatter ref="binary" typeFilterLevel="Full" />
          </clientProviders>

          <serverProviders>
            <formatter ref="binary" typeFilterLevel="Full" />
          </serverProviders>
        </channel>
      </channels>

      <service>


        <!--UserRemoteType-->
        <wellknown 
           type="Emedchina.TradeAssistant.Remoting.User.UserRemoteType,Emedchina.TradeAssistant.Remoting"
           objectUri="UserRemoteType.rem"
           mode="SingleCall" 
        />
        
        <!--SyncDataRemote-->
        <wellknown 
				   type="Emedchina.TradeAssistant.Remoting.Sync.SyncDataRemote,Emedchina.TradeAssistant.Remoting"
				   objectUri="SyncDataRemote.rem"
				   mode="SingleCall" 
        />
        
        <!--SalerReturnRemote-->
        <wellknown 
           type="Emedchina.TradeAssistant.Remoting.Order.SalerReturn.SalerReturnRemote,Emedchina.TradeAssistant.Remoting"
           objectUri="SalerReturnRemote.rem"
           mode="SingleCall" 
        />
        <!--SalerOrderRemote-->
        <wellknown 
           type="Emedchina.TradeAssistant.Remoting.Order.SalerOrder.SalerOrderRemote,Emedchina.TradeAssistant.Remoting"
           objectUri="SalerOrderRemote.rem"
           mode="SingleCall" 
        />
        <!--UploadRemote-->
        <wellknown 
           type="Emedchina.TradeAssistant.Remoting.Sync.UploadRemote,Emedchina.TradeAssistant.Remoting"
           objectUri="UploadRemote.rem"
           mode="SingleCall" 
         />
        
      </service>
    </application>
  </system.runtime.remoting>

  <!--异常处理-->
  <exceptionHandling>
    <exceptionPolicies>
      <add name="ConnectionFailed Log And Wrap Policy">
        <exceptionTypes>
          <add name="DbException" type="System.Data.Common.DbException, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add 
                  logCategory="Tracing" 
                  eventId="100" 
                  severity="Error" 
                  title="Connection Failed Exception Handler"
                  priority="0"
                  formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" 
                  name="Logging Handler"
                  type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                />
              <add name="Wrap Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" exceptionMessage="连接失败,请检查目标数据库的可用性和连接字符串的有效性." wrapExceptionType="Emedchina.Commons.Data.DataAcessException, Emedchina.Commons" />
            </exceptionHandlers>
          </add>

          <add name="InvalidOperationException" type="System.InvalidOperationException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Wrap Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" exceptionMessage="命令执行失败,请检查命令的有效性." wrapExceptionType="Emedchina.Commons.Data.DataAcessException, Emedchina.Commons" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>

      <add name="CommandFailed Wrap Policy">
        <exceptionTypes>
          <add name="DbException" type="System.Data.Common.DbException, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add 
                  logCategory="Tracing" 
                  eventId="100" 
                  severity="Error" 
                  title="Connection Failed Exception Handler"
                  priority="0"
                  formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" 
                  name="Logging Handler"
                  type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging"
                />
              <add name="Wrap Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" exceptionMessage="命令执行失败,请检查命令的有效性及连接是否正常." wrapExceptionType="Emedchina.Commons.Data.DataAcessException, Emedchina.Commons" />
            </exceptionHandlers>
          </add>

          <add name="InvalidOperationException" type="System.InvalidOperationException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Wrap Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" exceptionMessage="命令执行失败,请检查命令的有效性及连接是否正常." wrapExceptionType="Emedchina.Commons.Data.DataAcessException, Emedchina.Commons" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
    </exceptionPolicies>
  </exceptionHandling>

  <!--日志记录主要用于异常记录-->
  <loggingConfiguration defaultCategory="Tracing" tracingEnabled="true">
    <logFilters>
      <add name="Category" type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter, Microsoft.Practices.EnterpriseLibrary.Logging" categoryFilterMode="AllowAllExceptDenied">
        <categoryFilters/>
      </add>
      <add name="Priority" type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter, Microsoft.Practices.EnterpriseLibrary.Logging" minimumPriority="0"/>
    </logFilters>
    <categorySources>
      <add name="Default Category" switchValue="All">
        <listeners>
          <add name="Event Log Destination"/>
        </listeners>
      </add>
      <add name="Tracing" switchValue="All">
        <listeners>
          <add name="Flat File Destination"/>
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <errors name="errors" switchValue="All">
        <listeners>
          <add name="Event Log Destination"/>
        </listeners>
      </errors>
    </specialSources>
    <listeners>
      <add name="Event Log Destination" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" source="Enterprise Library Logging" formatter="Default Formatter"/>
      <add name="Flat File Destination" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" fileName="trace.log"/>
    </listeners>
    <formatters>
      <add name="Default Formatter" type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging" template="Timestamp: {timestamp}&#xA;Message: {message}&#xA;Category: {category}&#xA;Priority: {priority}&#xA;EventId: {eventid}&#xA;Severity: {severity}&#xA;Title:{title}&#xA;Machine: {machine}&#xA;Application Domain: {appDomain}&#xA;Process Id: {processId}&#xA;Process Name: {processName}&#xA;Win32 Thread Id: {win32ThreadId}&#xA;Thread Name: {threadName}&#xA;Extended Properties: {dictionary({key} - {value}&#xA;)}"/>
    </formatters>
  </loggingConfiguration>
  <!-- This section contains the log4net configuration settings -->
  <log4net>
    <!-- Define some output appenders -->
    <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <param name="File" value="log.txt" />
      <param name="AppendToFile" value="true" />
      <param name="MaxSizeRollBackups" value="2" />
      <param name="MaximumFileSize" value="100KB" />
      <param name="RollingStyle" value="Size" />
      <param name="StaticLogFileName" value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <param name="Header" value="[Header]\r\n" />
        <param name="Footer" value="[Footer]\r\n" />
        <param name="ConversionPattern" value="%d [%t] %-5p %c [%x] - %m%n" />
      </layout>
    </appender>
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="%d [%t] %-5p %c [%x] &lt;%X{auth}&gt; - %m%n" />
      </layout>
    </appender>

    <!-- Set root logger level to ERROR and its appenders -->
    <root>
      <level value="DEBUG" />
      <appender-ref ref="RollingLogFileAppender" />
      <appender-ref ref="ConsoleAppender" />
    </root>

    <!-- Print only messages of level DEBUG or above in the packages -->
    <logger name="Castle.Facilities.IBatisNetIntegration.AutomaticSessionInterceptor">
      <level value="DEBUG" />
    </logger>
  </log4net>

  <iBATIS>
    <logging>
      <!--<logFactoryAdapter type="IBatisNet.Common.Logging.Impl.ConsoleOutLoggerFA, IBatisNet.Common">
    <arg key="showLogName" value="true" />
    <arg key="showDataTime" value="true" />
    <arg key="level" value="ALL" />
    <arg key="dateTimeFormat" value="yyyy/MM/dd HH:mm:ss:SSS" />
   </logFactoryAdapter> -->

      <logFactoryAdapter type="IBatisNet.Common.Logging.Impl.Log4NetLoggerFA, IBatisNet.Common.Logging.Log4Net">
        <arg key="configType" value="inline" />
      </logFactoryAdapter>
    </logging>
  </iBATIS>
</configuration>